Terminals unused in grammar

   TOK_ARRAY
   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_TYPEID
   TOK_FIELD
   TOK_ROOT
   TOK_DECLID
   TOK
   TOK_PARAMLIST
   TOK_FUNCTION
   TOK_PROTOTYPE
   TOK_RETURNVOID
   TOK_VARDECL
   TOK_NEWSTRING
   TOK_INDEX


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | /* empty */

    8 structdef: struct_root '}'

    9 struct_root: struct_root fielddecl ';'
   10            | TOK_STRUCT TOK_IDENT '{'

   11 fielddecl: basetype TOK_IDENT
   12          | basetype TOK_NEWARRAY TOK_IDENT

   13 basetype: TOK_VOID
   14         | TOK_BOOL
   15         | TOK_CHAR
   16         | TOK_INT
   17         | TOK_STRING
   18         | TOK_IDENT

   19 function: identdecl '(' ')' block
   20         | identdecl funcroot ')' block

   21 funcroot: funcroot ',' identdecl
   22         | '(' identdecl

   23 identdecl: basetype TOK_IDENT
   24          | basetype TOK_NEWARRAY TOK_IDENT

   25 block: block_root '}'
   26      | ';'

   27 block_root: block_root statement
   28           | '{'

   29 statement: block
   30          | vardecl
   31          | while
   32          | ifelse
   33          | return
   34          | expr ';'

   35 vardecl: identdecl '=' expr ';'

   36 while: TOK_WHILE '(' expr ')' statement

   37 ifelse: TOK_IF '(' expr ')' statement
   38       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   39 return: TOK_RETURN ';'
   40       | TOK_RETURN expr ';'

   41 expr: expr '=' expr
   42     | expr TOK_EQ expr
   43     | expr TOK_NE expr
   44     | expr TOK_LT expr
   45     | expr TOK_LE expr
   46     | expr TOK_GT expr
   47     | expr TOK_GE expr
   48     | expr '+' expr
   49     | expr '-' expr
   50     | expr '*' expr
   51     | expr '/' expr
   52     | expr '%' expr
   53     | '+' expr
   54     | '-' expr
   55     | '!' expr
   56     | TOK_ORD expr
   57     | TOK_CHR expr
   58     | allocator
   59     | call
   60     | '(' expr ')'
   61     | variable
   62     | constant

   63 allocator: TOK_NEW TOK_IDENT '(' ')'
   64          | TOK_NEW TOK_STRING '(' expr ')'
   65          | TOK_NEW basetype '[' expr ']'

   66 call: TOK_IDENT '(' ')'
   67     | call_root ')'

   68 call_root: call_root ',' expr
   69          | TOK_IDENT '(' expr

   70 variable: TOK_IDENT
   71         | expr '[' expr ']'
   72         | expr '.' TOK_IDENT

   73 constant: TOK_INTCON
   74         | TOK_CHARCON
   75         | TOK_STRINGCON
   76         | TOK_FALSE
   77         | TOK_TRUE
   78         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 55
'%' (37) 52
'(' (40) 19 22 36 37 38 60 63 64 66 69
')' (41) 19 20 36 37 38 60 63 64 66 67
'*' (42) 50
'+' (43) 48 53
',' (44) 21 68
'-' (45) 49 54
'.' (46) 72
'/' (47) 51
';' (59) 6 9 26 34 35 39 40
'=' (61) 35 41
'[' (91) 65 71
']' (93) 65 71
'{' (123) 10 28
'}' (125) 5 8 25
error (256) 5 6
TOK_VOID (258) 13
TOK_BOOL (259) 14
TOK_CHAR (260) 15
TOK_INT (261) 16
TOK_STRING (262) 17 64
TOK_IF (263) 37 38
TOK_ELSE (264) 38
TOK_WHILE (265) 36
TOK_RETURN (266) 39 40
TOK_STRUCT (267) 10
TOK_FALSE (268) 76
TOK_TRUE (269) 77
TOK_NULL (270) 78
TOK_NEW (271) 63 64 65
TOK_ARRAY (272)
TOK_EQ (273) 42
TOK_NE (274) 43
TOK_LT (275) 44
TOK_LE (276) 45
TOK_GT (277) 46
TOK_GE (278) 47
TOK_IDENT (279) 10 11 12 18 23 24 63 66 69 70 72
TOK_INTCON (280) 73
TOK_CHARCON (281) 74
TOK_STRINGCON (282) 75
TOK_BLOCK (283)
TOK_CALL (284)
TOK_IFELSE (285)
TOK_INITDECL (286)
TOK_POS (287)
TOK_NEG (288)
TOK_NEWARRAY (289) 12 24
TOK_TYPEID (290)
TOK_FIELD (291)
TOK_ORD (292) 56
TOK_CHR (293) 57
TOK_ROOT (294)
TOK_DECLID (295)
TOK (296)
TOK_PARAMLIST (297)
TOK_FUNCTION (298)
TOK_PROTOTYPE (299)
TOK_RETURNVOID (300)
TOK_VARDECL (301)
TOK_NEWSTRING (302)
TOK_INDEX (303)


Nonterminals, with rules where they appear

$accept (65)
    on left: 0
start (66)
    on left: 1, on right: 0
program (67)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (68)
    on left: 8, on right: 2
struct_root (69)
    on left: 9 10, on right: 8 9
fielddecl (70)
    on left: 11 12, on right: 9
basetype (71)
    on left: 13 14 15 16 17 18, on right: 11 12 23 24 65
function (72)
    on left: 19 20, on right: 3
funcroot (73)
    on left: 21 22, on right: 20 21
identdecl (74)
    on left: 23 24, on right: 19 20 21 22 35
block (75)
    on left: 25 26, on right: 19 20 29
block_root (76)
    on left: 27 28, on right: 25 27
statement (77)
    on left: 29 30 31 32 33 34, on right: 4 27 36 37 38
vardecl (78)
    on left: 35, on right: 30
while (79)
    on left: 36, on right: 31
ifelse (80)
    on left: 37 38, on right: 32
return (81)
    on left: 39 40, on right: 33
expr (82)
    on left: 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58
    59 60 61 62, on right: 34 35 36 37 38 40 41 42 43 44 45 46 47 48
    49 50 51 52 53 54 55 56 57 60 64 65 68 69 71 72
allocator (83)
    on left: 63 64 65, on right: 58
call (84)
    on left: 66 67, on right: 59
call_root (85)
    on left: 68 69, on right: 67 68
variable (86)
    on left: 70 71 72, on right: 61
constant (87)
    on left: 73 74 75 76 77 78, on right: 62


state 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


state 1

    0 $accept: start . $end

    $end  shift, and go to state 3


state 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_STRUCT     shift, and go to state 13
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    $end  reduce using rule 1 (start)

    structdef    go to state 30
    struct_root  go to state 31
    basetype     go to state 32
    function     go to state 33
    identdecl    go to state 34
    block        go to state 35
    block_root   go to state 36
    statement    go to state 37
    vardecl      go to state 38
    while        go to state 39
    ifelse       go to state 40
    return       go to state 41
    expr         go to state 42
    allocator    go to state 43
    call         go to state 44
    call_root    go to state 45
    variable     go to state 46
    constant     go to state 47


state 3

    0 $accept: start $end .

    $default  accept


state 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 48
    ';'  shift, and go to state 49


state 5

   13 basetype: TOK_VOID .

    $default  reduce using rule 13 (basetype)


state 6

   14 basetype: TOK_BOOL .

    $default  reduce using rule 14 (basetype)


state 7

   15 basetype: TOK_CHAR .

    $default  reduce using rule 15 (basetype)


state 8

   16 basetype: TOK_INT .

    $default  reduce using rule 16 (basetype)


state 9

   17 basetype: TOK_STRING .

    $default  reduce using rule 17 (basetype)


state 10

   37 ifelse: TOK_IF . '(' expr ')' statement
   38       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 50


state 11

   36 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 51


state 12

   39 return: TOK_RETURN . ';'
   40       | TOK_RETURN . expr ';'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 53

    expr       go to state 54
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 13

   10 struct_root: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 55


state 14

   76 constant: TOK_FALSE .

    $default  reduce using rule 76 (constant)


state 15

   77 constant: TOK_TRUE .

    $default  reduce using rule 77 (constant)


state 16

   78 constant: TOK_NULL .

    $default  reduce using rule 78 (constant)


state 17

   63 allocator: TOK_NEW . TOK_IDENT '(' ')'
   64          | TOK_NEW . TOK_STRING '(' expr ')'
   65          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 56
    TOK_IDENT   shift, and go to state 57

    basetype  go to state 58


state 18

   18 basetype: TOK_IDENT .
   66 call: TOK_IDENT . '(' ')'
   69 call_root: TOK_IDENT . '(' expr
   70 variable: TOK_IDENT .

    '('  shift, and go to state 59

    TOK_IDENT     reduce using rule 18 (basetype)
    TOK_NEWARRAY  reduce using rule 18 (basetype)
    $default      reduce using rule 70 (variable)


state 19

   73 constant: TOK_INTCON .

    $default  reduce using rule 73 (constant)


state 20

   74 constant: TOK_CHARCON .

    $default  reduce using rule 74 (constant)


state 21

   75 constant: TOK_STRINGCON .

    $default  reduce using rule 75 (constant)


state 22

   56 expr: TOK_ORD . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 60
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 23

   57 expr: TOK_CHR . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 61
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 24

   53 expr: '+' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 62
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 25

   54 expr: '-' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 63
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 26

   55 expr: '!' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 64
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 27

   60 expr: '(' . expr ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 65
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 28

   26 block: ';' .

    $default  reduce using rule 26 (block)


state 29

   28 block_root: '{' .

    $default  reduce using rule 28 (block_root)


state 30

    2 program: program structdef .

    $default  reduce using rule 2 (program)


state 31

    8 structdef: struct_root . '}'
    9 struct_root: struct_root . fielddecl ';'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 66
    '}'         shift, and go to state 67

    fielddecl  go to state 68
    basetype   go to state 69


state 32

   23 identdecl: basetype . TOK_IDENT
   24          | basetype . TOK_NEWARRAY TOK_IDENT

    TOK_IDENT     shift, and go to state 70
    TOK_NEWARRAY  shift, and go to state 71


state 33

    3 program: program function .

    $default  reduce using rule 3 (program)


state 34

   19 function: identdecl . '(' ')' block
   20         | identdecl . funcroot ')' block
   35 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 72
    '('  shift, and go to state 73

    funcroot  go to state 74


state 35

   29 statement: block .

    $default  reduce using rule 29 (statement)


state 36

   25 block: block_root . '}'
   27 block_root: block_root . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    '}'            shift, and go to state 75
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype    go to state 32
    identdecl   go to state 76
    block       go to state 35
    block_root  go to state 36
    statement   go to state 77
    vardecl     go to state 38
    while       go to state 39
    ifelse      go to state 40
    return      go to state 41
    expr        go to state 42
    allocator   go to state 43
    call        go to state 44
    call_root   go to state 45
    variable    go to state 46
    constant    go to state 47


state 37

    4 program: program statement .

    $default  reduce using rule 4 (program)


state 38

   30 statement: vardecl .

    $default  reduce using rule 30 (statement)


state 39

   31 statement: while .

    $default  reduce using rule 31 (statement)


state 40

   32 statement: ifelse .

    $default  reduce using rule 32 (statement)


state 41

   33 statement: return .

    $default  reduce using rule 33 (statement)


state 42

   34 statement: expr . ';'
   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '='     shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '['     shift, and go to state 90
    '.'     shift, and go to state 91
    ';'     shift, and go to state 92


state 43

   58 expr: allocator .

    $default  reduce using rule 58 (expr)


state 44

   59 expr: call .

    $default  reduce using rule 59 (expr)


state 45

   67 call: call_root . ')'
   68 call_root: call_root . ',' expr

    ')'  shift, and go to state 93
    ','  shift, and go to state 94


state 46

   61 expr: variable .

    $default  reduce using rule 61 (expr)


state 47

   62 expr: constant .

    $default  reduce using rule 62 (expr)


state 48

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


state 49

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


state 50

   37 ifelse: TOK_IF '(' . expr ')' statement
   38       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 95
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 51

   36 while: TOK_WHILE '(' . expr ')' statement

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 96
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 52

   66 call: TOK_IDENT . '(' ')'
   69 call_root: TOK_IDENT . '(' expr
   70 variable: TOK_IDENT .

    '('  shift, and go to state 59

    $default  reduce using rule 70 (variable)


state 53

   39 return: TOK_RETURN ';' .

    $default  reduce using rule 39 (return)


state 54

   40 return: TOK_RETURN expr . ';'
   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '='     shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '['     shift, and go to state 90
    '.'     shift, and go to state 91
    ';'     shift, and go to state 97


state 55

   10 struct_root: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 98


state 56

   17 basetype: TOK_STRING .
   64 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 99

    $default  reduce using rule 17 (basetype)


state 57

   18 basetype: TOK_IDENT .
   63 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 100

    $default  reduce using rule 18 (basetype)


state 58

   65 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 101


state 59

   66 call: TOK_IDENT '(' . ')'
   69 call_root: TOK_IDENT '(' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ')'            shift, and go to state 102

    expr       go to state 103
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 60

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   56     | TOK_ORD expr .
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    '['  shift, and go to state 90
    '.'  shift, and go to state 91

    $default  reduce using rule 56 (expr)


state 61

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   57     | TOK_CHR expr .
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    '['  shift, and go to state 90
    '.'  shift, and go to state 91

    $default  reduce using rule 57 (expr)


state 62

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   53     | '+' expr .
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    '['  shift, and go to state 90
    '.'  shift, and go to state 91

    $default  reduce using rule 53 (expr)


state 63

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   54     | '-' expr .
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    '['  shift, and go to state 90
    '.'  shift, and go to state 91

    $default  reduce using rule 54 (expr)


state 64

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   55     | '!' expr .
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    '['  shift, and go to state 90
    '.'  shift, and go to state 91

    $default  reduce using rule 55 (expr)


state 65

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   60     | '(' expr . ')'
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '='     shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '['     shift, and go to state 90
    '.'     shift, and go to state 91
    ')'     shift, and go to state 104


state 66

   18 basetype: TOK_IDENT .

    $default  reduce using rule 18 (basetype)


state 67

    8 structdef: struct_root '}' .

    $default  reduce using rule 8 (structdef)


state 68

    9 struct_root: struct_root fielddecl . ';'

    ';'  shift, and go to state 105


state 69

   11 fielddecl: basetype . TOK_IDENT
   12          | basetype . TOK_NEWARRAY TOK_IDENT

    TOK_IDENT     shift, and go to state 106
    TOK_NEWARRAY  shift, and go to state 107


state 70

   23 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 23 (identdecl)


state 71

   24 identdecl: basetype TOK_NEWARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 108


state 72

   35 vardecl: identdecl '=' . expr ';'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 109
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 73

   19 function: identdecl '(' . ')' block
   22 funcroot: '(' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 66
    ')'         shift, and go to state 110

    basetype   go to state 32
    identdecl  go to state 111


state 74

   20 function: identdecl funcroot . ')' block
   21 funcroot: funcroot . ',' identdecl

    ')'  shift, and go to state 112
    ','  shift, and go to state 113


state 75

   25 block: block_root '}' .

    $default  reduce using rule 25 (block)


state 76

   35 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 72


state 77

   27 block_root: block_root statement .

    $default  reduce using rule 27 (block_root)


state 78

   42 expr: expr TOK_EQ . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 114
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 79

   43 expr: expr TOK_NE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 115
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 80

   44 expr: expr TOK_LT . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 116
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 81

   45 expr: expr TOK_LE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 117
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 82

   46 expr: expr TOK_GT . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 118
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 83

   47 expr: expr TOK_GE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 119
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 84

   41 expr: expr '=' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 120
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 85

   48 expr: expr '+' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 121
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 86

   49 expr: expr '-' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 122
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 87

   50 expr: expr '*' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 123
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 88

   51 expr: expr '/' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 124
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 89

   52 expr: expr '%' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 125
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 90

   71 variable: expr '[' . expr ']'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 126
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 91

   72 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 127


state 92

   34 statement: expr ';' .

    $default  reduce using rule 34 (statement)


state 93

   67 call: call_root ')' .

    $default  reduce using rule 67 (call)


state 94

   68 call_root: call_root ',' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 128
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 95

   37 ifelse: TOK_IF '(' expr . ')' statement
   38       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '='     shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '['     shift, and go to state 90
    '.'     shift, and go to state 91
    ')'     shift, and go to state 129


state 96

   36 while: TOK_WHILE '(' expr . ')' statement
   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '='     shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '['     shift, and go to state 90
    '.'     shift, and go to state 91
    ')'     shift, and go to state 130


state 97

   40 return: TOK_RETURN expr ';' .

    $default  reduce using rule 40 (return)


state 98

   10 struct_root: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 10 (struct_root)


state 99

   64 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 131
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 100

   63 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 132


state 101

   65 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 133
    allocator  go to state 43
    call       go to state 44
    call_root  go to state 45
    variable   go to state 46
    constant   go to state 47


state 102

   66 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 66 (call)


state 103

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   69 call_root: TOK_IDENT '(' expr .
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '='     shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '['     shift, and go to state 90
    '.'     shift, and go to state 91

    $default  reduce using rule 69 (call_root)


state 104

   60 expr: '(' expr ')' .

    $default  reduce using rule 60 (expr)


state 105

    9 struct_root: struct_root fielddecl ';' .

    $default  reduce using rule 9 (struct_root)


state 106

   11 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 11 (fielddecl)


state 107

   12 fielddecl: basetype TOK_NEWARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 134


state 108

   24 identdecl: basetype TOK_NEWARRAY TOK_IDENT .

    $default  reduce using rule 24 (identdecl)


state 109

   35 vardecl: identdecl '=' expr . ';'
   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '='     shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '['     shift, and go to state 90
    '.'     shift, and go to state 91
    ';'     shift, and go to state 135


state 110

   19 function: identdecl '(' ')' . block

    ';'  shift, and go to state 28
    '{'  shift, and go to state 29

    block       go to state 136
    block_root  go to state 36


state 111

   22 funcroot: '(' identdecl .

    $default  reduce using rule 22 (funcroot)


state 112

   20 function: identdecl funcroot ')' . block

    ';'  shift, and go to state 28
    '{'  shift, and go to state 29

    block       go to state 137
    block_root  go to state 36


state 113

   21 funcroot: funcroot ',' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 66

    basetype   go to state 32
    identdecl  go to state 138


state 114

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   42     | expr TOK_EQ expr .
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 85
    '-'  shift, and go to state 86
    '*'  shift, and go to state 87
    '/'  shift, and go to state 88
    '%'  shift, and go to state 89
    '['  shift, and go to state 90
    '.'  shift, and go to state 91

    $default  reduce using rule 42 (expr)


state 115

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   43     | expr TOK_NE expr .
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 85
    '-'  shift, and go to state 86
    '*'  shift, and go to state 87
    '/'  shift, and go to state 88
    '%'  shift, and go to state 89
    '['  shift, and go to state 90
    '.'  shift, and go to state 91

    $default  reduce using rule 43 (expr)


state 116

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   44     | expr TOK_LT expr .
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 85
    '-'  shift, and go to state 86
    '*'  shift, and go to state 87
    '/'  shift, and go to state 88
    '%'  shift, and go to state 89
    '['  shift, and go to state 90
    '.'  shift, and go to state 91

    $default  reduce using rule 44 (expr)


state 117

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   45     | expr TOK_LE expr .
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 85
    '-'  shift, and go to state 86
    '*'  shift, and go to state 87
    '/'  shift, and go to state 88
    '%'  shift, and go to state 89
    '['  shift, and go to state 90
    '.'  shift, and go to state 91

    $default  reduce using rule 45 (expr)


state 118

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   46     | expr TOK_GT expr .
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 85
    '-'  shift, and go to state 86
    '*'  shift, and go to state 87
    '/'  shift, and go to state 88
    '%'  shift, and go to state 89
    '['  shift, and go to state 90
    '.'  shift, and go to state 91

    $default  reduce using rule 46 (expr)


state 119

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   47     | expr TOK_GE expr .
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 85
    '-'  shift, and go to state 86
    '*'  shift, and go to state 87
    '/'  shift, and go to state 88
    '%'  shift, and go to state 89
    '['  shift, and go to state 90
    '.'  shift, and go to state 91

    $default  reduce using rule 47 (expr)


state 120

   41 expr: expr . '=' expr
   41     | expr '=' expr .
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '='     shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '['     shift, and go to state 90
    '.'     shift, and go to state 91

    $default  reduce using rule 41 (expr)


state 121

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   48     | expr '+' expr .
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 87
    '/'  shift, and go to state 88
    '%'  shift, and go to state 89
    '['  shift, and go to state 90
    '.'  shift, and go to state 91

    $default  reduce using rule 48 (expr)


state 122

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   49     | expr '-' expr .
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 87
    '/'  shift, and go to state 88
    '%'  shift, and go to state 89
    '['  shift, and go to state 90
    '.'  shift, and go to state 91

    $default  reduce using rule 49 (expr)


state 123

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   50     | expr '*' expr .
   51     | expr . '/' expr
   52     | expr . '%' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    '['  shift, and go to state 90
    '.'  shift, and go to state 91

    $default  reduce using rule 50 (expr)


state 124

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   51     | expr '/' expr .
   52     | expr . '%' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    '['  shift, and go to state 90
    '.'  shift, and go to state 91

    $default  reduce using rule 51 (expr)


state 125

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   52     | expr '%' expr .
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    '['  shift, and go to state 90
    '.'  shift, and go to state 91

    $default  reduce using rule 52 (expr)


state 126

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   71 variable: expr . '[' expr ']'
   71         | expr '[' expr . ']'
   72         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '='     shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '['     shift, and go to state 90
    '.'     shift, and go to state 91
    ']'     shift, and go to state 139


state 127

   72 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 72 (variable)


state 128

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   68 call_root: call_root ',' expr .
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '='     shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '['     shift, and go to state 90
    '.'     shift, and go to state 91

    $default  reduce using rule 68 (call_root)


state 129

   37 ifelse: TOK_IF '(' expr ')' . statement
   38       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype    go to state 32
    identdecl   go to state 76
    block       go to state 35
    block_root  go to state 36
    statement   go to state 140
    vardecl     go to state 38
    while       go to state 39
    ifelse      go to state 40
    return      go to state 41
    expr        go to state 42
    allocator   go to state 43
    call        go to state 44
    call_root   go to state 45
    variable    go to state 46
    constant    go to state 47


state 130

   36 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype    go to state 32
    identdecl   go to state 76
    block       go to state 35
    block_root  go to state 36
    statement   go to state 141
    vardecl     go to state 38
    while       go to state 39
    ifelse      go to state 40
    return      go to state 41
    expr        go to state 42
    allocator   go to state 43
    call        go to state 44
    call_root   go to state 45
    variable    go to state 46
    constant    go to state 47


state 131

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   64 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '='     shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '['     shift, and go to state 90
    '.'     shift, and go to state 91
    ')'     shift, and go to state 142


state 132

   63 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 63 (allocator)


state 133

   41 expr: expr . '=' expr
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | expr . TOK_GT expr
   47     | expr . TOK_GE expr
   48     | expr . '+' expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '%' expr
   65 allocator: TOK_NEW basetype '[' expr . ']'
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '='     shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '['     shift, and go to state 90
    '.'     shift, and go to state 91
    ']'     shift, and go to state 143


state 134

   12 fielddecl: basetype TOK_NEWARRAY TOK_IDENT .

    $default  reduce using rule 12 (fielddecl)


state 135

   35 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 35 (vardecl)


state 136

   19 function: identdecl '(' ')' block .

    $default  reduce using rule 19 (function)


state 137

   20 function: identdecl funcroot ')' block .

    $default  reduce using rule 20 (function)


state 138

   21 funcroot: funcroot ',' identdecl .

    $default  reduce using rule 21 (funcroot)


state 139

   71 variable: expr '[' expr ']' .

    $default  reduce using rule 71 (variable)


state 140

   37 ifelse: TOK_IF '(' expr ')' statement .
   38       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 144

    $default  reduce using rule 37 (ifelse)


state 141

   36 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 36 (while)


state 142

   64 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 64 (allocator)


state 143

   65 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 65 (allocator)


state 144

   38 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype    go to state 32
    identdecl   go to state 76
    block       go to state 35
    block_root  go to state 36
    statement   go to state 145
    vardecl     go to state 38
    while       go to state 39
    ifelse      go to state 40
    return      go to state 41
    expr        go to state 42
    allocator   go to state 43
    call        go to state 44
    call_root   go to state 45
    variable    go to state 46
    constant    go to state 47


state 145

   38 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 38 (ifelse)
